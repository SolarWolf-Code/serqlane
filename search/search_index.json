{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to Serqlane","text":"<p>Serqlane is a statically typed, compiled, general-purpose programming language. It is designed to be simple and easy to use, while still being powerful and expressive.</p> <p>To get started with Serqlane, check out the introduction page.</p>"},{"location":"introduction.html","title":"Introduction","text":"<p>This page should get you started with serqlane. The preferred method of development is using a nix shell, but it is not required.</p>"},{"location":"introduction.html#prerequisites","title":"Prerequisites","text":"<p>If you are using nix, it is the only prerequisite.  </p> <p>Activate your shell by running <code>nix develop</code> in the root of the repository.</p> <p>Note</p> <p>You may need to enable some experimental features if you have not done so already. This can be done either by running <code>nix develop --experimental-features 'nix-command flakes'</code> or by adding the following to your nix config: <pre><code>experimental-features = [\"nix-command\" \"flakes\"];\n</code></pre></p> <p>If you are not using nix, here is what you should have installed:  </p> <ul> <li>Python 3.12+</li> <li>Poetry</li> </ul> <p>Some optional quality of life packages:</p> <ul> <li>black</li> <li>isort</li> <li>vulture</li> </ul>"},{"location":"introduction.html#installation","title":"Installation","text":"<p>After installing poetry you can run the following command to install all dependencies. <pre><code>poetry install\n</code></pre></p>"},{"location":"introduction.html#running","title":"Running","text":""},{"location":"introduction.html#serqlane-files","title":"Serqlane Files","text":"<p>To run a serqlane file, run the following command: <pre><code>poetry run serqlane &lt;path-to-file&gt;\n</code></pre></p>"},{"location":"introduction.html#tests","title":"Tests","text":"<p>To run the tests, run the following command: <pre><code>poetry run pytest\n</code></pre></p>"},{"location":"introduction.html#hello-world","title":"Hello World","text":"<p>Create a file called <code>hello.sq</code> with the following contents: <pre><code>dbg(\"Hello World!\")\n</code></pre> <pre><code>DBG: Hello World\n</code></pre></p>"},{"location":"introduction.html#next-steps","title":"Next Steps","text":"<p>Now that you have serqlane installed, you can check out Writing Serqlane to learn more about the language.</p>"},{"location":"writing-serqlane.html","title":"Writing Serqlane","text":"<p>This page contains information on how to write code in serqlane. By the end of this page, you should have a basic understanding of how to write code in serqlane.</p> <p>Note</p> <p>Expect this page to be updated frequently as the language is still in development. </p>"},{"location":"writing-serqlane.html#naming-convention","title":"Naming Convention","text":"<p>The naming convention for serqlane is snake_case. This means that all names should be lowercase and words should be separated by underscores. For example, <code>my_variable</code> is a valid name, but <code>myVariable</code> is not.</p>"},{"location":"writing-serqlane.html#comments","title":"Comments","text":"<p>Comments are used to add notes to your code. They are ignored by the compiler and are only used to help you and future developers understand your code. To add a comment, start a line with <code>//</code>. Everything after the <code>//</code> will be ignored by the compiler. For example:  </p> <p><pre><code>// This is a comment\ndbg(\"This code should still run\") // This is also a comment\n// dbg(\"this line will not run\")\n</code></pre> <pre><code>DBG: This code should still run\n</code></pre></p>"},{"location":"writing-serqlane.html#variables","title":"Variables","text":"<p>Variables are used to store data. They can be used to store any type of data. You cannot change the type of the variable once it is created. Addtionally, you cannot change the value of the variable unless it is marked as mutable. </p> <p>To create a inferrable variable, use the <code>let</code> keyword followed by the name of the variable, an equals sign, and the value you want to store in the variable. For example this variable will be inferred as a string:</p> <p><pre><code>let my_variable = \"this is a string\"\ndbg(my_variable)\n</code></pre> <pre><code>DBG: This is a string\n</code></pre></p> <p>Or explicitly declare the type of the variable by adding a colon and the type of the variable after the name of the variable. For example this variable will be explicitly declared as a string:</p> <p><pre><code>let my_variable: string = \"this is a string\"\ndbg(my_variable)\n</code></pre> <pre><code>DBG: This is a string\n</code></pre></p> <p>Attempting to change the value of a variable that lacks the <code>mut</code> keyword will result in an error. For example:</p> <p><pre><code>let my_variable = \"This is a string\"\nmy_variable = \"This is a different string\"\ndbg(my_variable)\n</code></pre> <pre><code>ValueError: my_variable is not mutable\n</code></pre></p> <p>Similarly, attempting to change the type of a variable will also result in an error. For example:</p> <p><pre><code>let my_variable = \"This is a string\"\nmy_variable = 42\ndbg(my_variable)\n</code></pre> <pre><code>AssertionError\n</code></pre></p>"},{"location":"writing-serqlane.html#mutability","title":"Mutability","text":"<p>By default, variables are immutable. This means that once you create a variable, you cannot change its value. To make a variable mutable, use the <code>mut</code> keyword before the name of the variable. For example:</p> <p><pre><code>let mut my_variable = \"Hello World!\"\nmy_variable = \"Goodbye World!\"\ndbg(my_variable)\n</code></pre> <pre><code>DBG: Goodbye World!\n</code></pre></p>"},{"location":"writing-serqlane.html#functions","title":"Functions","text":"<p>Functions are used to group together a set of instructions. They can be called from anywhere in your program. To create a function, use the <code>fn</code> keyword followed by the name of the function and optional parameters (separated by commas).</p> <p>A function in its simplest form looks like this:  </p> <p><pre><code>fn my_function() {\n    dbg(\"This is my function!\")\n}\nmy_function()\n</code></pre> <pre><code>DBG: This is my function!\n</code></pre></p>"},{"location":"writing-serqlane.html#function-parameters","title":"Function Parameters","text":"<p>Functions can take parameters. Parameters are used to pass data into a function. Each paramter is required to have a type. To add parameters to a function, add the name of the parameter followed by the type of the parameter. Parameters are separated by commas. For example:</p> <p><pre><code>fn my_function(my_parameter: string) {\n    dbg(my_parameter)\n}\nmy_function(\"This is my parameter!\")\n</code></pre> <pre><code>DBG: This is my parameter!\n</code></pre> Or, if you want to pass in multiple parameters:</p> <p><pre><code>fn multiple_parameters(parameter_one: string, parameter_two: int64) {\n    dbg(parameter_one)\n    dbg(parameter_two)\n}\nmultiple_parameters(\"This is my first parameter!\", 42)\n</code></pre> <pre><code>DBG: This is my first parameter!\nDBG: 42\n</code></pre></p>"},{"location":"writing-serqlane.html#function-return-values","title":"Function Return Values","text":"<p>Functions can return values. To return a value from a function, use the <code>return</code> keyword followed by the value you want to return. Lastly, add the type of the value you are returning after the function parameters using <code>-&gt;</code>. For example:</p> <p><pre><code>fn my_function() -&gt; string {\n    let x = \"This is my return value!\"\n    return x\n}\n\nfn my_other_function() -&gt; string {\n    let x = \"This is my other return value!\"\n    x\n}\ndbg(my_function())\ndbg(my_other_function())\n</code></pre> <pre><code>DBG: This is my return value!\nDBG: This is my other return value!\n</code></pre></p>"},{"location":"writing-serqlane.html#function-overloading","title":"Function Overloading","text":"<p>Functions can be overloaded. This means that you can have multiple functions with the same name, but different parameters. For example:</p> <p><pre><code>fn my_function() {\n    dbg(\"This is my function!\")\n}\n\nfn my_function(parameter: string) {\n    dbg(parameter)\n}\n\nmy_function()\nmy_function(\"This is my parameter!\")\n</code></pre> <pre><code>DBG: This is my function!\nDBG: This is my parameter!\n</code></pre></p>"},{"location":"writing-serqlane.html#function-scope","title":"Function Scope","text":"<p>Functions have their own scope. This means that variables declared inside of a function are not accessible outside of the function. For example:</p> <p><pre><code>fn my_function() {\n    let x = \"This is my variable!\"\n}\nmy_function()\ndbg(x)\n</code></pre> <pre><code>ValueError: Bad identifier: x\n</code></pre></p>"},{"location":"writing-serqlane.html#shadowing","title":"Shadowing","text":"<p>Shadowing is allowed in serqlane. This means that you can declare a variable with the same name as another variable as long as the new variable is in a different scope. For example:</p> <p><pre><code>let x = \"This is my first variable!\"\n\nfn foo(x: string) -&gt; string {\n    dbg(x)\n    return x\n}\n\nfoo(\"This is my second variable!\")\ndbg(x)\n</code></pre> <pre><code>DBG: This is my second variable!\nDBG: This is my first variable!\n</code></pre></p>"},{"location":"writing-serqlane.html#types","title":"Types","text":"<p>serqlane is a statically typed language. This means that every variable and function must have a type. The following types are supported by serqlane:</p>"},{"location":"writing-serqlane.html#primitive-types","title":"Primitive Types","text":"<p>Primitive types are the most basic types in serqlane. They are the building blocks for all other types. The following primitive types are supported by serqlane:</p> <ul> <li><code>bool</code>: A boolean value. Can be either <code>true</code> or <code>false</code>.</li> <li> <p><code>int</code>: An integer value. Can be any whole number.</p> <ul> <li><code>int8</code>: An 8-bit integer value. Can be any whole number between -128 and 127.</li> <li><code>int16</code>: A 16-bit integer value. Can be any whole number between -32,768 and 32,767.</li> <li><code>int32</code>: A 32-bit integer value. Can be any whole number between -2,147,483,648 and 2,147,483,647.</li> <li> <p><code>int64</code>: A 64-bit integer value. Can be any whole number between -9,223,372,036,854,775,808 and 9,223,372,036,854,775,807.</p> </li> <li> <p><code>uint8</code>: An 8-bit unsigned integer value. Can be any whole number between 0 and 255.</p> </li> <li><code>uint16</code>: A 16-bit unsigned integer value. Can be any whole number between 0 and 65,535.</li> <li><code>uint32</code>: A 32-bit unsigned integer value. Can be any whole number between 0 and 4,294,967,295.</li> <li><code>uint64</code>: A 64-bit unsigned integer value. Can be any whole number between 0 and 18,446,744,073,709,551,615.</li> </ul> </li> <li> <p><code>float</code>: A floating point value. Can be any decimal number.</p> <ul> <li><code>float32</code>: A 32-bit floating point value. Can be any decimal number between 1.175494351e-38 and 3.402823466e+38.</li> <li><code>float64</code>: A 64-bit floating point value. Can be any decimal number between 2.2250738585072014e-308 and 1.7976931348623157e+308.</li> </ul> </li> <li> <p><code>char</code>: A single character. Can be any single character.</p> </li> </ul>"},{"location":"writing-serqlane.html#compound-types","title":"Compound Types","text":"<p>Compound types are types that are made up of other types. The following compound types are supported by serqlane:</p> <ul> <li><code>string</code>: A string of characters. Can be any sequence of characters.</li> </ul> <p>Not-implemented</p> <ul> <li><code>array</code>: An array of values. Can be any sequence of values.</li> </ul>"},{"location":"writing-serqlane.html#structs","title":"Structs","text":"<p>You can create custom types by using the <code>struct</code> keyword. A struct is a collection of named values. To create a struct, use the <code>struct</code> keyword followed by the name of the struct, and a list of fields. Each field is required to have a name and a type. For example:</p> <p><pre><code>struct Person {\n    age: int64\n}\nlet mut p = Person()\np.age = 42\n</code></pre> To access a field in a struct, use the dot operator. From the previous example, to access the <code>age</code> field in the <code>Person</code> struct, you would use <code>p.age</code>. For example:</p> <p><pre><code>struct Person {\n    age: int64\n}\nlet mut p = Person()\np.age = 42\ndbg(p.age)\n</code></pre> <pre><code>DBG: 42\n</code></pre></p>"},{"location":"writing-serqlane.html#aliases","title":"Aliases","text":"<p>You can create aliases for types by using the <code>alias</code> keyword. An alias is a new name for an existing type. To create an alias, use the <code>alias</code> keyword followed by the name of the alias, an equals sign, and the type you want to alias. For example:</p> <p><pre><code>alias int = int64\nlet x: int = 42\ndbg(x)\n</code></pre> <pre><code>DBG: 42\n</code></pre></p>"},{"location":"writing-serqlane.html#loops","title":"Loops","text":"<p>Loops are used to repeat a set of instructions. The following types of loops are supported by serqlane:</p>"},{"location":"writing-serqlane.html#for-loops","title":"For Loops","text":"<p>Not-implemented</p> <p>For loops are not yet implemented.  What is written below is a rough idea of what they will look like.</p> <p>For loops are used to repeat a set of instructions a set number of times. To create a for loop, use the <code>for</code> keyword followed by a set of parentheses, a variable name, the <code>in</code> keyword, a range or array, and a set of curly braces. For example:</p> <p><pre><code>for i in 0..3 {\n    dbg(i)\n}\n</code></pre> <pre><code>DBG: 0\nDBG: 1\nDBG: 2\n</code></pre></p> <p><pre><code>let x = [\"foo\",\"bar\",\"baz\"]\nfor i in x {\n    dbg(i)\n}\n</code></pre> <pre><code>DBG: foo\nDBG: bar\nDBG: baz\n</code></pre></p>"},{"location":"writing-serqlane.html#while-loops","title":"While Loops","text":"<p>While loops are used to repeat a set of instructions while a condition is true. To create a while loop, use the <code>while</code> keyword followed by a set of parentheses, a condition, and a set of curly braces. For example:</p> <p><pre><code>let mut x = 0\nwhile x &lt; 4 {\n    dbg(x)\n    x = x + 1\n}\n</code></pre> <pre><code>DBG: 0\nDBG: 1\nDBG: 2\nDBG: 3\n</code></pre></p>"},{"location":"writing-serqlane.html#conditionals","title":"Conditionals","text":"<p>Conditionals are used to execute a set of instructions based on a condition. The following types of conditionals are supported by serqlane:</p>"},{"location":"writing-serqlane.html#if-statements","title":"If Statements","text":"<p>If statements are used to execute a set of instructions if a condition is true. To create an if statement, use the <code>if</code> keyword followed by a set of parentheses, a condition, and a set of curly braces. For example:</p> <p><pre><code>let x = 42\nif x == 42 {\n    dbg(\"x is 42\")\n}\n</code></pre> <pre><code>DBG: x is 42\n</code></pre></p>"},{"location":"writing-serqlane.html#if-else-statements","title":"If-Else Statements","text":"<p>If-else statements are used to execute a set of instructions if a condition is true and another set of instructions if the condition is false. To create an if-else statement, use the <code>if</code> keyword followed by a set of parentheses, a condition, a set of curly braces, the <code>else</code> keyword, and another set of curly braces. For example:</p> <p><pre><code>let x = 54\nif x == 42 {\n    dbg(\"x is 42\")\n} else {\n    dbg(\"x is not 42\")\n}\n</code></pre> <pre><code>DBG: x is not 42\n</code></pre></p>"},{"location":"writing-serqlane.html#elif-statements","title":"Elif Statements","text":"<p>Not-implemented</p> <p>Elif statements are not yet implemented.  What is written below is a rough idea of what they will look like.</p> <p>Elif statements are used to execute a set of instructions if a condition is true and another set of instructions if the condition is false. To create an elif statement, use the <code>if</code> keyword followed by a set of parentheses, a condition, a set of curly braces, the <code>elif</code> keyword, another set of parentheses, another condition, another set of curly braces, and the <code>else</code> keyword followed by another set of curly braces. For example:</p> <p><pre><code>let x = 54\nif x == 42 {\n    dbg(\"x is 42\")\n} elif x == 54 {\n    dbg(\"x is 54\")\n} else {\n    dbg(\"x is not 42 or 54\")\n}\n</code></pre> <pre><code>DBG: x is 54\n</code></pre></p>"},{"location":"writing-serqlane.html#operators","title":"Operators","text":"<p>Operators are used to perform operations on values. The following operators are supported by serqlane:</p>"},{"location":"writing-serqlane.html#binary-operators","title":"Binary Operators","text":"<p>Arithmetic operators are used to perform arithmetic operations on values. The following arithmetic operators are supported by serqlane:</p> <ul> <li><code>+</code>: Addition</li> <li><code>-</code>: Subtraction</li> <li><code>*</code>: Multiplication</li> <li><code>/</code>: Division</li> <li><code>%</code>: Modulo</li> </ul> <p>To use an arithmetic operator, use the operator between two expressions. For example:</p> <p><pre><code>dbg(1 + 2)\ndbg(1 - 2)\ndbg(1 * 2)\ndbg(1 / 2)\ndbg(1 % 2)\n</code></pre> <pre><code>DBG: 3\nDBG: -1\nDBG: 2\nDBG: 0\nDBG: 1\n</code></pre></p>"},{"location":"writing-serqlane.html#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare values. The following comparison operators are supported by serqlane:</p> <ul> <li><code>==</code>: Equal to</li> <li><code>!=</code>: Not equal to</li> <li><code>&lt;</code>: Less than</li> <li><code>&gt;</code>: Greater than</li> <li><code>&lt;=</code>: Less than or equal to</li> <li><code>&gt;=</code>: Greater than or equal to</li> </ul> <p>To use a comparison operator, use the operator between two values. For example:</p> <p><pre><code>dbg(1 == 2)\ndbg(1 != 2)\ndbg(1 &lt; 2)\ndbg(1 &gt; 2)\ndbg(1 &lt;= 2)\ndbg(1 &gt;= 2)\n</code></pre> <pre><code>DBG: false\nDBG: true\nDBG: true\nDBG: false\nDBG: true\nDBG: false\n</code></pre></p>"},{"location":"writing-serqlane.html#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to perform logical operations on values. The following logical operators are supported by serqlane:</p> <ul> <li><code>and</code>: Logical and</li> <li><code>or</code>: Logical or</li> <li><code>not</code>: Logical not</li> </ul> <p>To use a logical operator, use the operator between two values. For example:</p> <p><pre><code>let x = 10\nlet y = 20\nif x == 10 and y == 20 {\n    dbg(\"x is 10 and y is 20\")\n}\nif x == 10 or y == 20 {\n    dbg(\"x is 10 or y is 20\")\n}\nif not x == 20 {\n    dbg(\"x is not 20\")\n}\n</code></pre> <pre><code>DBG: x is 10 and y is 20\nDBG: x is 10 or y is 20\nDBG: x is not 20\n</code></pre></p>"},{"location":"writing-serqlane.html#unary-operators","title":"Unary Operators","text":"<p>Not-implemented</p> <p>Unary operators are not yet implemented. </p>"},{"location":"writing-serqlane.html#imports","title":"Imports","text":"<p>Importing is used to include code from other files. To import a file, use the <code>import</code> keyword followed by the name of the file you want to import. Then you'll need to use the dot operator to access the code you want to use. For example:</p> <p>Note</p> <p>Keep in mind that you can only import something from another file if it is marked as <code>pub</code>.</p> other.sq<pre><code>pub fn add(x: int64, y: int64) -&gt; int64 {\n    return x + y\n}\n\npub struct Person {\n    name: string,\n}\n</code></pre> <p>main.sq<pre><code>import other\n\nlet mut p = other.Person()\na.name = \"John\"\n\ndbg(other.add(1, 2))\ndbg(a.name)\n</code></pre> <pre><code>DBG: 3\nDBG: John\n</code></pre></p>"},{"location":"writing-serqlane.html#from-imports","title":"From Imports","text":"<p>You can instead import specific functions from a file by using the <code>from</code> keyword. This will allow you to use the functions without having to use the dot operator. To import specific functions from a file, add each function contained within <code>[]</code> after the <code>from</code> keyword. To import all functions from a file, use <code>*</code> instead of <code>[]</code>. </p> <p>Single function import other.sq<pre><code>pub fn add(x: int64, y: int64) -&gt; int64 {\n    return x + y\n}\n\npub fn subtract(x: int64, y: int64) -&gt; int64 {\n    return x - y\n}\n</code></pre></p> <p>main.sq<pre><code>from other import [add]\ndbg(add(1, 2))\n</code></pre> <pre><code>DBG: 3\n</code></pre></p> <p>Multiple function import main.sq<pre><code>from other import [add, subtract]\ndbg(add(1, 2))\ndbg(subtract(1, 2))\n</code></pre> <pre><code>DBG: 3\nDBG: -1\n</code></pre> Or import all functions main.sq<pre><code>from other import *\ndbg(add(1, 2))\ndbg(subtract(1, 2))\n</code></pre> <pre><code>DBG: 3\nDBG: -1\n</code></pre></p>"}]}